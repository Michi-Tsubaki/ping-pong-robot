// Generated by gencpp from file kxr_controller/PressureControl.msg
// DO NOT EDIT!


#ifndef KXR_CONTROLLER_MESSAGE_PRESSURECONTROL_H
#define KXR_CONTROLLER_MESSAGE_PRESSURECONTROL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kxr_controller
{
template <class ContainerAllocator>
struct PressureControl_
{
  typedef PressureControl_<ContainerAllocator> Type;

  PressureControl_()
    : board_idx(0)
    , trigger_pressure(0.0)
    , target_pressure(0.0)
    , release_duration(0.0)  {
    }
  PressureControl_(const ContainerAllocator& _alloc)
    : board_idx(0)
    , trigger_pressure(0.0)
    , target_pressure(0.0)
    , release_duration(0.0)  {
  (void)_alloc;
    }



   typedef uint16_t _board_idx_type;
  _board_idx_type board_idx;

   typedef float _trigger_pressure_type;
  _trigger_pressure_type trigger_pressure;

   typedef float _target_pressure_type;
  _target_pressure_type target_pressure;

   typedef float _release_duration_type;
  _release_duration_type release_duration;





  typedef boost::shared_ptr< ::kxr_controller::PressureControl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kxr_controller::PressureControl_<ContainerAllocator> const> ConstPtr;

}; // struct PressureControl_

typedef ::kxr_controller::PressureControl_<std::allocator<void> > PressureControl;

typedef boost::shared_ptr< ::kxr_controller::PressureControl > PressureControlPtr;
typedef boost::shared_ptr< ::kxr_controller::PressureControl const> PressureControlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kxr_controller::PressureControl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kxr_controller::PressureControl_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kxr_controller::PressureControl_<ContainerAllocator1> & lhs, const ::kxr_controller::PressureControl_<ContainerAllocator2> & rhs)
{
  return lhs.board_idx == rhs.board_idx &&
    lhs.trigger_pressure == rhs.trigger_pressure &&
    lhs.target_pressure == rhs.target_pressure &&
    lhs.release_duration == rhs.release_duration;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kxr_controller::PressureControl_<ContainerAllocator1> & lhs, const ::kxr_controller::PressureControl_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kxr_controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kxr_controller::PressureControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kxr_controller::PressureControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kxr_controller::PressureControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kxr_controller::PressureControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kxr_controller::PressureControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kxr_controller::PressureControl_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kxr_controller::PressureControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a86a02fea7b03d3f9f0d8e33715d5ad0";
  }

  static const char* value(const ::kxr_controller::PressureControl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa86a02fea7b03d3fULL;
  static const uint64_t static_value2 = 0x9f0d8e33715d5ad0ULL;
};

template<class ContainerAllocator>
struct DataType< ::kxr_controller::PressureControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kxr_controller/PressureControl";
  }

  static const char* value(const ::kxr_controller::PressureControl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kxr_controller::PressureControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 board_idx # ICS controller ID (2n or 2n+1)\n"
"\n"
"# Pressure control parameters\n"
"# If trigger_pressure < target_pressure: pressurization mode\n"
"# If trigger_pressure > target_pressure: depressurization mode\n"
"float32 trigger_pressure # Pressure threshold to start valve operation [kPa]\n"
"float32 target_pressure # Desired pressure level for optimal operation [kPa]\n"
"\n"
"# Air release parameters\n"
"# If the value is zero, pressure control is performed based on trigger_pressure and target_pressure\n"
"# If the value is greater than zero, solenoid valves opens for release_duration[s] and the work conducts to the atmosphere\n"
"float32 release_duration # Duration for atmospheric venting [s]\n"
;
  }

  static const char* value(const ::kxr_controller::PressureControl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kxr_controller::PressureControl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.board_idx);
      stream.next(m.trigger_pressure);
      stream.next(m.target_pressure);
      stream.next(m.release_duration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PressureControl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kxr_controller::PressureControl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kxr_controller::PressureControl_<ContainerAllocator>& v)
  {
    s << indent << "board_idx: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.board_idx);
    s << indent << "trigger_pressure: ";
    Printer<float>::stream(s, indent + "  ", v.trigger_pressure);
    s << indent << "target_pressure: ";
    Printer<float>::stream(s, indent + "  ", v.target_pressure);
    s << indent << "release_duration: ";
    Printer<float>::stream(s, indent + "  ", v.release_duration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KXR_CONTROLLER_MESSAGE_PRESSURECONTROL_H
