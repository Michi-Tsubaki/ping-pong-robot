# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kxr_controller/PressureControlGoal.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class PressureControlGoal(genpy.Message):
  _md5sum = "a86a02fea7b03d3f9f0d8e33715d5ad0"
  _type = "kxr_controller/PressureControlGoal"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
uint16 board_idx # ICS controller ID (2n or 2n+1)

# Pressure control parameters
# If trigger_pressure < target_pressure: pressurization mode
# If trigger_pressure > target_pressure: depressurization mode
float32 trigger_pressure # Pressure threshold to start valve operation [kPa]
float32 target_pressure # Desired pressure level for optimal operation [kPa]

# Air release parameters
# If the value is zero, pressure control is performed based on trigger_pressure and target_pressure
# If the value is greater than zero, solenoid valves opens for release_duration[s] and the work conducts to the atmosphere
float32 release_duration # Duration for atmospheric venting [s]
"""
  __slots__ = ['board_idx','trigger_pressure','target_pressure','release_duration']
  _slot_types = ['uint16','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       board_idx,trigger_pressure,target_pressure,release_duration

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PressureControlGoal, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.board_idx is None:
        self.board_idx = 0
      if self.trigger_pressure is None:
        self.trigger_pressure = 0.
      if self.target_pressure is None:
        self.target_pressure = 0.
      if self.release_duration is None:
        self.release_duration = 0.
    else:
      self.board_idx = 0
      self.trigger_pressure = 0.
      self.target_pressure = 0.
      self.release_duration = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_H3f().pack(_x.board_idx, _x.trigger_pressure, _x.target_pressure, _x.release_duration))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 14
      (_x.board_idx, _x.trigger_pressure, _x.target_pressure, _x.release_duration,) = _get_struct_H3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_H3f().pack(_x.board_idx, _x.trigger_pressure, _x.target_pressure, _x.release_duration))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 14
      (_x.board_idx, _x.trigger_pressure, _x.target_pressure, _x.release_duration,) = _get_struct_H3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_H3f = None
def _get_struct_H3f():
    global _struct_H3f
    if _struct_H3f is None:
        _struct_H3f = struct.Struct("<H3f")
    return _struct_H3f
