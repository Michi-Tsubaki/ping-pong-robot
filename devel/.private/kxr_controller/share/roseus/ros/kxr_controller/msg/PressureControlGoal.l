;; Auto-generated. Do not edit!


(when (boundp 'kxr_controller::PressureControlGoal)
  (if (not (find-package "KXR_CONTROLLER"))
    (make-package "KXR_CONTROLLER"))
  (shadow 'PressureControlGoal (find-package "KXR_CONTROLLER")))
(unless (find-package "KXR_CONTROLLER::PRESSURECONTROLGOAL")
  (make-package "KXR_CONTROLLER::PRESSURECONTROLGOAL"))

(in-package "ROS")
;;//! \htmlinclude PressureControlGoal.msg.html


(defclass kxr_controller::PressureControlGoal
  :super ros::object
  :slots (_board_idx _trigger_pressure _target_pressure _release_duration ))

(defmethod kxr_controller::PressureControlGoal
  (:init
   (&key
    ((:board_idx __board_idx) 0)
    ((:trigger_pressure __trigger_pressure) 0.0)
    ((:target_pressure __target_pressure) 0.0)
    ((:release_duration __release_duration) 0.0)
    )
   (send-super :init)
   (setq _board_idx (round __board_idx))
   (setq _trigger_pressure (float __trigger_pressure))
   (setq _target_pressure (float __target_pressure))
   (setq _release_duration (float __release_duration))
   self)
  (:board_idx
   (&optional __board_idx)
   (if __board_idx (setq _board_idx __board_idx)) _board_idx)
  (:trigger_pressure
   (&optional __trigger_pressure)
   (if __trigger_pressure (setq _trigger_pressure __trigger_pressure)) _trigger_pressure)
  (:target_pressure
   (&optional __target_pressure)
   (if __target_pressure (setq _target_pressure __target_pressure)) _target_pressure)
  (:release_duration
   (&optional __release_duration)
   (if __release_duration (setq _release_duration __release_duration)) _release_duration)
  (:serialization-length
   ()
   (+
    ;; uint16 _board_idx
    2
    ;; float32 _trigger_pressure
    4
    ;; float32 _target_pressure
    4
    ;; float32 _release_duration
    4
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; uint16 _board_idx
       (write-word _board_idx s)
     ;; float32 _trigger_pressure
       (sys::poke _trigger_pressure (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
     ;; float32 _target_pressure
       (sys::poke _target_pressure (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
     ;; float32 _release_duration
       (sys::poke _release_duration (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; uint16 _board_idx
     (setq _board_idx (sys::peek buf ptr- :short)) (incf ptr- 2)
   ;; float32 _trigger_pressure
     (setq _trigger_pressure (sys::peek buf ptr- :float)) (incf ptr- 4)
   ;; float32 _target_pressure
     (setq _target_pressure (sys::peek buf ptr- :float)) (incf ptr- 4)
   ;; float32 _release_duration
     (setq _release_duration (sys::peek buf ptr- :float)) (incf ptr- 4)
   ;;
   self)
  )

(setf (get kxr_controller::PressureControlGoal :md5sum-) "a86a02fea7b03d3f9f0d8e33715d5ad0")
(setf (get kxr_controller::PressureControlGoal :datatype-) "kxr_controller/PressureControlGoal")
(setf (get kxr_controller::PressureControlGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
uint16 board_idx # ICS controller ID (2n or 2n+1)

# Pressure control parameters
# If trigger_pressure < target_pressure: pressurization mode
# If trigger_pressure > target_pressure: depressurization mode
float32 trigger_pressure # Pressure threshold to start valve operation [kPa]
float32 target_pressure # Desired pressure level for optimal operation [kPa]

# Air release parameters
# If the value is zero, pressure control is performed based on trigger_pressure and target_pressure
# If the value is greater than zero, solenoid valves opens for release_duration[s] and the work conducts to the atmosphere
float32 release_duration # Duration for atmospheric venting [s]

")



(provide :kxr_controller/PressureControlGoal "a86a02fea7b03d3f9f0d8e33715d5ad0")


