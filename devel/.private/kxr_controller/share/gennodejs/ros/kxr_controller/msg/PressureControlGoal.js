// Auto-generated. Do not edit!

// (in-package kxr_controller.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;

//-----------------------------------------------------------

class PressureControlGoal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.board_idx = null;
      this.trigger_pressure = null;
      this.target_pressure = null;
      this.release_duration = null;
    }
    else {
      if (initObj.hasOwnProperty('board_idx')) {
        this.board_idx = initObj.board_idx
      }
      else {
        this.board_idx = 0;
      }
      if (initObj.hasOwnProperty('trigger_pressure')) {
        this.trigger_pressure = initObj.trigger_pressure
      }
      else {
        this.trigger_pressure = 0.0;
      }
      if (initObj.hasOwnProperty('target_pressure')) {
        this.target_pressure = initObj.target_pressure
      }
      else {
        this.target_pressure = 0.0;
      }
      if (initObj.hasOwnProperty('release_duration')) {
        this.release_duration = initObj.release_duration
      }
      else {
        this.release_duration = 0.0;
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type PressureControlGoal
    // Serialize message field [board_idx]
    bufferOffset = _serializer.uint16(obj.board_idx, buffer, bufferOffset);
    // Serialize message field [trigger_pressure]
    bufferOffset = _serializer.float32(obj.trigger_pressure, buffer, bufferOffset);
    // Serialize message field [target_pressure]
    bufferOffset = _serializer.float32(obj.target_pressure, buffer, bufferOffset);
    // Serialize message field [release_duration]
    bufferOffset = _serializer.float32(obj.release_duration, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type PressureControlGoal
    let len;
    let data = new PressureControlGoal(null);
    // Deserialize message field [board_idx]
    data.board_idx = _deserializer.uint16(buffer, bufferOffset);
    // Deserialize message field [trigger_pressure]
    data.trigger_pressure = _deserializer.float32(buffer, bufferOffset);
    // Deserialize message field [target_pressure]
    data.target_pressure = _deserializer.float32(buffer, bufferOffset);
    // Deserialize message field [release_duration]
    data.release_duration = _deserializer.float32(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    return 14;
  }

  static datatype() {
    // Returns string type for a message object
    return 'kxr_controller/PressureControlGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return 'a86a02fea7b03d3f9f0d8e33715d5ad0';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    uint16 board_idx # ICS controller ID (2n or 2n+1)
    
    # Pressure control parameters
    # If trigger_pressure < target_pressure: pressurization mode
    # If trigger_pressure > target_pressure: depressurization mode
    float32 trigger_pressure # Pressure threshold to start valve operation [kPa]
    float32 target_pressure # Desired pressure level for optimal operation [kPa]
    
    # Air release parameters
    # If the value is zero, pressure control is performed based on trigger_pressure and target_pressure
    # If the value is greater than zero, solenoid valves opens for release_duration[s] and the work conducts to the atmosphere
    float32 release_duration # Duration for atmospheric venting [s]
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new PressureControlGoal(null);
    if (msg.board_idx !== undefined) {
      resolved.board_idx = msg.board_idx;
    }
    else {
      resolved.board_idx = 0
    }

    if (msg.trigger_pressure !== undefined) {
      resolved.trigger_pressure = msg.trigger_pressure;
    }
    else {
      resolved.trigger_pressure = 0.0
    }

    if (msg.target_pressure !== undefined) {
      resolved.target_pressure = msg.target_pressure;
    }
    else {
      resolved.target_pressure = 0.0
    }

    if (msg.release_duration !== undefined) {
      resolved.release_duration = msg.release_duration;
    }
    else {
      resolved.release_duration = 0.0
    }

    return resolved;
    }
};

module.exports = PressureControlGoal;
