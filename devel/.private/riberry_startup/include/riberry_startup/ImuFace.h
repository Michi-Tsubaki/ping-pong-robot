// Generated by gencpp from file riberry_startup/ImuFace.msg
// DO NOT EDIT!


#ifndef RIBERRY_STARTUP_MESSAGE_IMUFACE_H
#define RIBERRY_STARTUP_MESSAGE_IMUFACE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace riberry_startup
{
template <class ContainerAllocator>
struct ImuFace_
{
  typedef ImuFace_<ContainerAllocator> Type;

  ImuFace_()
    : face(0)  {
    }
  ImuFace_(const ContainerAllocator& _alloc)
    : face(0)  {
  (void)_alloc;
    }



   typedef uint8_t _face_type;
  _face_type face;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(NONE)
  #undef NONE
#endif
#if defined(_WIN32) && defined(TOP)
  #undef TOP
#endif
#if defined(_WIN32) && defined(BOTTOM)
  #undef BOTTOM
#endif
#if defined(_WIN32) && defined(FRONT)
  #undef FRONT
#endif
#if defined(_WIN32) && defined(BACK)
  #undef BACK
#endif
#if defined(_WIN32) && defined(LEFT)
  #undef LEFT
#endif
#if defined(_WIN32) && defined(RIGHT)
  #undef RIGHT
#endif

  enum {
    NONE = 0u,
    TOP = 1u,
    BOTTOM = 2u,
    FRONT = 3u,
    BACK = 4u,
    LEFT = 5u,
    RIGHT = 6u,
  };


  typedef boost::shared_ptr< ::riberry_startup::ImuFace_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::riberry_startup::ImuFace_<ContainerAllocator> const> ConstPtr;

}; // struct ImuFace_

typedef ::riberry_startup::ImuFace_<std::allocator<void> > ImuFace;

typedef boost::shared_ptr< ::riberry_startup::ImuFace > ImuFacePtr;
typedef boost::shared_ptr< ::riberry_startup::ImuFace const> ImuFaceConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::riberry_startup::ImuFace_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::riberry_startup::ImuFace_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::riberry_startup::ImuFace_<ContainerAllocator1> & lhs, const ::riberry_startup::ImuFace_<ContainerAllocator2> & rhs)
{
  return lhs.face == rhs.face;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::riberry_startup::ImuFace_<ContainerAllocator1> & lhs, const ::riberry_startup::ImuFace_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace riberry_startup

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::riberry_startup::ImuFace_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::riberry_startup::ImuFace_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::riberry_startup::ImuFace_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::riberry_startup::ImuFace_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::riberry_startup::ImuFace_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::riberry_startup::ImuFace_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::riberry_startup::ImuFace_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bc43845fd7aaeadf93808c9e9901eb62";
  }

  static const char* value(const ::riberry_startup::ImuFace_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbc43845fd7aaeadfULL;
  static const uint64_t static_value2 = 0x93808c9e9901eb62ULL;
};

template<class ContainerAllocator>
struct DataType< ::riberry_startup::ImuFace_<ContainerAllocator> >
{
  static const char* value()
  {
    return "riberry_startup/ImuFace";
  }

  static const char* value(const ::riberry_startup::ImuFace_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::riberry_startup::ImuFace_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 NONE=0\n"
"uint8 TOP=1\n"
"uint8 BOTTOM=2\n"
"uint8 FRONT=3\n"
"uint8 BACK=4\n"
"uint8 LEFT=5\n"
"uint8 RIGHT=6\n"
"\n"
"uint8 face\n"
;
  }

  static const char* value(const ::riberry_startup::ImuFace_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::riberry_startup::ImuFace_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.face);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ImuFace_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::riberry_startup::ImuFace_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::riberry_startup::ImuFace_<ContainerAllocator>& v)
  {
    s << indent << "face: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.face);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RIBERRY_STARTUP_MESSAGE_IMUFACE_H
