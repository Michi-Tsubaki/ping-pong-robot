<launch>

  <arg name="queue_size" default="5" />
  <arg name="manager" default="/camera/realsense2_camera_manager" />
  <arg name="input_image" default="/camera/color/image_raw" />  

  <!-- <node name="hsv_color_filter" -->
  <!--       pkg="nodelet" type="nodelet" -->
  <!--       args="load opencv_apps/hsv_color_filter $(arg manager)" -->
  <!--       output="screen" > -->
  <!--   <remap from="image" to="$(arg input_image)" /> -->
  <!-- </node> -->

  <arg name="h_limit_max" default="17" doc="The maximum allowed field value Hue" />
  <arg name="h_limit_min" default="353" doc="The minimum allowed field value Hue" />
  <arg name="s_limit_max" default="255" doc="The maximum allowed field value Saturation" />
  <arg name="s_limit_min" default="25" doc="The minimum allowed field value Saturation" />
  <arg name="v_limit_max" default="255" doc="The maximum allowed field value Value" />
  <arg name="v_limit_min" default="25" doc="The minimum allowed field value Value" />

  <!-- color_filter.cpp  -->
  <node name="hsv_color_filter" pkg="opencv_apps" type="hsv_color_filter" output="screen">
    <remap from="image" to="$(arg input_image)" />
    <param name="queue_size" value="$(arg queue_size)" />
    <param name="h_limit_max" value="$(arg h_limit_max)" />
    <param name="h_limit_min" value="$(arg h_limit_min)" />
    <param name="s_limit_max" value="$(arg s_limit_max)" />
    <param name="s_limit_min" value="$(arg s_limit_min)" />
    <param name="v_limit_max" value="$(arg v_limit_max)" />
    <param name="v_limit_min" value="$(arg v_limit_min)" />
  </node>
  

  <node name="morphology_open"
        pkg="nodelet" type="nodelet"
        args="load jsk_perception/Opening $(arg manager)"
        output="screen" >
    <remap from="~input" to="/hsv_color_filter/image" />
    <param name="size" value="5" />
  </node>

  <node name="depth_image_filter"
        pkg="jsk_perception" type="depth_image_filter.py"
        clear_params="true"
        output="screen" >
    <remap from="~input" to="/camera/aligned_depth_to_color/image_raw" />
    <rosparam subst_value="true">
      threshold: 2.0
    </rosparam>
  </node>

  <node name="depth_apply_mask_image"
        pkg="nodelet" type="nodelet"
        args="load jsk_perception/ApplyMaskImage $(arg manager)"
        respawn="true" >
    <remap from="~input" to="/camera/aligned_depth_to_color/image_raw" />
    <remap from="~input/mask" to="/depth_image_filter/output/mask" />
    <rosparam subst_value="true" >
      approximate_sync: false
      clip: false
      queue_size: $(arg queue_size)
    </rosparam>
  </node>
  
  <node name="apply_mask_image"
        pkg="nodelet" type="nodelet"
        args="load jsk_perception/ApplyMaskImage $(arg manager)"
        respawn="true" >
    <remap from="~input" to="/depth_apply_mask_image/output" />
    <remap from="~input/mask" to="/morphology_open/output" />
    <rosparam subst_value="true" >    
      approximate_sync: false
      clip: false
      queue_size: $(arg queue_size)      
    </rosparam>
  </node>

  <node name="debug_apply_mask_image"
        pkg="nodelet" type="nodelet"
        args="load jsk_perception/ApplyMaskImage $(arg manager)"
        respawn="true" >
    <remap from="~input" to="/camera/color/image_raw" />
    <remap from="~input/mask" to="/morphology_open/output" />
    <rosparam>
      approximate_sync: false
      clip: false
      queue_size: 100
    </rosparam>
  </node>

  <node name="filtered_points_xyzrgb"
        pkg="nodelet" type="nodelet"
        args="standalone depth_image_proc/point_cloud_xyzrgb $(arg manager)" >
    <remap from="rgb/camera_info"             to="/camera/color/camera_info"/>
    <remap from="rgb/image_rect_color"        to="/camera/color/image_raw"/>
    <remap from="depth_registered/image_rect" to="/apply_mask_image/output"/>
    <remap from="depth_registered/points"     to="/filtered/aligned_depth_to_color/points"/>
    <param name="queue_size" type="int" value="$(arg queue_size)"/>
  </node>

  <node name="centroid_publisher"
        pkg="nodelet" type="nodelet"
        args="load jsk_pcl_utils/CentroidPublisher $(arg manager)">
    <remap from="~input" to="/filtered/aligned_depth_to_color/points" />
    <rosparam>
      publish_tf: false
    </rosparam>
  </node>

</launch>

<!-- <launch> -->
<!-- 	<group ns="detect_ball"> -->
<!--     <node name="image_decompresser" -->
<!--       pkg="image_transport" type="republish" -->
<!--       args="compressed raw" respawn="true"> -->
<!--       <remap from="in" to="/camera/color/image_raw"/> -->
<!--       <remap from="out" to="decompressed_image"/> -->
<!--     </node> -->

<!--     <node name="depth_decompresser" -->
<!--       pkg="image_transport" type="republish" -->
<!--       args="compressedDepth raw" respawn="true"> -->
<!--       <remap from="in" to="/camera/aligned_depth_to_color/image_raw"/> -->
<!--       <remap from="out" to="decompressed_depth"/> -->
<!--     </node> -->

<!--     <node pkg="jsk_topic_tools" type="synchronize_republish.py" name="synchronize_republish"> -->
<!--       <param name="topics" value="[/detect_ball/decompressed_image, /detect_ball/decompressed_depth]" type="yaml"/> -->
<!--       <param name="approximate_sync" value="true" /> -->
<!--     </node> -->

<!--     <arg name="manager" value="detect_ball" /> -->

<!--       <node pkg="nodelet" type="nodelet" name="$(arg manager)"  -->
<!--         args="manager" output="screen"/> -->

<!--       <node pkg="nodelet" type="nodelet" name="decompress_points" -->
<!--         args="load depth_image_proc/point_cloud_xyzrgb $(arg manager)"> -->
<!--         <remap from="rgb/camera_info" to="/camera/depth/camera_info"/> -->
<!--         <remap from="rgb/image_rect_color" to="synchronize_republish/pub_00"/> -->
<!--         <remap from="depth_registered/image_rect" to="synchronize_republish/pub_01"/> -->
<!--         <rosparam> -->
<!--           queue_size: 100 -->
<!--         </rosparam> -->
<!--       </node> -->

<!--       <node name="transformable_interactive_server" -->
<!--             pkg="jsk_interactive_marker" type="transformable_server_sample"> -->
<!--         <rosparam subst_value="true"> -->
<!--           display_interactive_manipulator: true -->
<!--           display_interactive_manipulator_only_selected: true -->
<!--           display_description_only_selected: true -->
<!--         </rosparam> -->
<!--       </node> -->

<!--       <node name="transformable_table_markers" -->
<!--             pkg="jsk_interactive_marker" type="transformable_markers_client.py"> -->
<!--         <remap from="~server" to="transformable_interactive_server" /> -->
<!--         <rosparam subst_value="true"> -->
<!--           config_file: $(find ping-pong)/config/ball_marker.yaml -->
<!--           config_auto_save: true  <!-\- Use true to save config updated on rviz -\-> -->
<!--         </rosparam> -->
<!--       </node> -->

<!--       <node name="bbox_array_to_bbox" -->
<!--             pkg="nodelet" type="nodelet" -->
<!--             args="load jsk_pcl_utils/BoundingBoxArrayToBoundingBox $(arg manager)"> -->
<!--         <remap from="~input" to="transformable_table_markers/output/boxes" /> -->
<!--         <rosparam> -->
<!--           index: 0 -->
<!--         </rosparam> -->
<!--       </node> -->
        
<!--       <node name="attention_clipper_table" -->
<!--             pkg="nodelet" type="nodelet" -->
<!--             args="load jsk_pcl/AttentionClipper $(arg manager)"> -->
<!--         <remap from="~input" to="/kinect_head/depth_registered/camera_info" /> -->
<!--         <remap from="~input/points" to="depth_registered/points" /> -->
<!--         <remap from="~input/box" to="bbox_array_to_bbox/output" /> -->
<!--         <rosparam subst_value="true"> -->
<!--           use_multiple_attention: false -->
<!--         </rosparam> -->
<!--       </node> -->

<!--       <node name="extract_indices_table" -->
<!--             pkg="nodelet" type="nodelet" -->
<!--             args="load jsk_pcl/ExtractIndices $(arg manager)"> -->
<!--         <remap from="~input" to="depth_registered/points" /> -->
<!--         <remap from="~indices" to="attention_clipper_table/output/point_indices" /> -->
<!--         <rosparam> -->
<!--           keep_organized: true -->
<!--           approximate_sync: true -->
<!--           max_queue_size: 100 -->
<!--         </rosparam> -->
<!--       </node> -->

<!--       <node pkg="nodelet" type="nodelet" name="hsi_filter" -->
<!--         args="load jsk_pcl/HSIColorFilter $(arg manager)" output="screen"> -->
<!--         <remap from="~input" to="depth_registered/points" /> -->
<!--         <rosparam> -->
<!--           use_indices: false -->
<!--           keep_organized: true -->
<!--           h_limit_max: 6 -->
<!--           h_limit_min: -6 -->
<!--           s_limit_max: 255 -->
<!--           s_limit_min: 92 -->
<!--           i_limit_max: 255 -->
<!--           i_limit_min: 0 -->
<!--         </rosparam> -->
<!--       </node> -->

<!--       <node pkg="nodelet" type="nodelet" name="euclidean_clustering" -->
<!--         args="load jsk_pcl/EuclideanClustering $(arg manager)" output="screen"> -->
<!--         <remap from="~input" to="hsi_filter/output" /> -->
<!--         <rosparam> -->
<!--           tolerance: 0.01 -->
<!--           min_size: 40 -->
<!--           max_size: 10000 -->
<!--           downsample_enable: true -->
<!--           cluster_filter: 1 -->
<!--         </rosparam> -->
<!--       </node> -->

<!--       <node pkg="nodelet" type="nodelet" -->
<!--         name="cluster_decomposer" -->
<!--         args="load jsk_pcl/ClusterPointIndicesDecomposer $(arg manager)" -->
<!--         output="screen" clear_params="true"> -->
<!--         <remap from="~input" to="hsi_filter/output" /> -->
<!--         <remap from="~target" to="euclidean_clustering/output" /> -->
<!--         <rosparam> -->
<!--           align_boxes: true -->
<!--           align_boxes_with_plane: false -->
<!--           force_to_flip_z_axis: false -->
<!--           use_pca: false -->
<!--           target_frame_id: camera_link -->
<!--         </rosparam> -->
<!--       </node> -->
<!--   </group> -->
<!-- </launch> -->

