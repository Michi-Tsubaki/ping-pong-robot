#!/usr/bin/python3

## SPDX-FileCopyrightText: 2024 Michitoshi Tsubaki <michi.tsubaki.tech@g.ecc.u-tokyo.ac.jp>
## SPDX-License-Identifier: BSD-3-Clause

import sys
import rospy
import cv2
import numpy as np
import time
from sensor_msgs.msg import Image
from cv_bridge import CvBridge #rosのimage型からopencvの型に変換するブリッジ

d435_path = "/camera/color/image_raw"
usb_path = "/usb_cam/image_raw"

class Ball():
    def __init__(self):
        # use camera frame
        self.xpos = 0
        self.ypos = 0
        self.zpos = 0
        self.name = ping-pong-ball

    def update(xpos, ypos, zpos):
        self.xpos = xpos
        self.ypos = ypos
        self.zpos = zpos

def image_cb(msg):
    global image_raw
    rospy.loginfo("get image data")
    bridge = CvBridge()
    image_raw = bridge.imgmsg_to_cv2(msg, "bgr8") #ROS形式からopenCV形式に変換

def hsv_color_filter(img):
    hsvdata = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
    lower_hsv1 = np.array([0, 0, 170]) #0 0 0 
    upper_hsv1 = np.array([180, 70, 255]) #30 255 255
    img_mask1 = cv2.inRange(hsvdata, lower_hsv1, upper_hsv1)
    lower_hsv2 = np.array([0, 0, 200]) #150 0 0
    upper_hsv2 = np.array([0, 50, 255]) #180 255 255
    img_mask2 = cv2.inRange(hsvdata, lower_hsv2, upper_hsv2)
    img_mask = img_mask1 + img_mask2
    filtered_img = cv2.bitwise_and(hsvdata, hsvdata, mask=img_mask)
    hsvdata = cv2.cvtColor(img, cv2.COLOR_HSV2BGR)
    return filtered_img

def moving_object_extractor(previmg,nextimg):
    ##https://qiita.com/otakoma/items/04216c60fa31eae60947h を参考にした．
    color_diff = cv2.absdiff(nextimg, previmg)
    gray_diff = cv2.cvtColor(color_diff, cv2.COLOR_BGR2GRAY)
    return gray_diff

def dilation_image(dilationSize, kernelSize, img):
    ##https://qiita.com/otakoma/items/04216c60fa31eae60947 を引用した．
    kernel = np.ones((kernelSize, kernelSize), np.uint8)
    element = cv2.getStructuringElement(
        cv2.MORPH_RECT, (2 * dilationSize + 1, 2 * dilationSize + 1), (dilationSize, dilationSize))
    dilation_img = cv2.dilate(img, kernel, element)
    return dilation_img

##重心計算
def find_balls(img):
    retval, black_diff = cv2.threshold(img, 30, 255, cv2.THRESH_BINARY) 
    contours, hierarchy = cv2.findContours(black_diff, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    print(contours)
    ball_pos = []
    for i in range(len(contours)):  # 重心位置
        count = len(contours[i])
        area = cv2.contourArea(contours[i])
        x, y = 0.0, 0.0
        for j in range(count):
            x += contours[i][j][0][0]
            y += contours[i][j][0][1]

        x /= count
        y /= count
        x = int(x)
        y = int(y)
        ball_pos.append([x, y])
    return ball_pos

def displayCircle(img, ballList, thickness=5):
    for i in range(len(ballList)):
        x = int(ballList[i][0])
        y = int(ballList[i][1])
        cv2.circle(img, (x, y), 10, (0, 0, 255), thickness)
    return img

def black2color(bImage):
    colorImage = np.array((bImage, bImage, bImage))
    print(colorImage.shape)
    print(colorImage.dtype)
    colorImage = colorImage[0:2]
    colorImage = colorImage.transpose(1, 2, 0)
    return colorImage

def resizeImage(image, w=2, h=2):
    height = image.shape[0]
    width = image.shape[1]
    resizedImage = cv2.resize(image, (int(width / w), int(height / h)))
    return resizedImage

def image_by_d435():
    rospy.Subscriber(d435_path, Image, image_cb)

def image_by_usb():
    rospy.Subscriber(usb_path, Image, image_cb)

def image_by_video():
    global cap
    cap = cv2.VideoCapture("../test/video.mp4")

def is_topic_alive(topic_name):
    published_topics = rospy.get_published_topics()
    return any(topic_name == topic[0] for topic in published_topics)



def main():
    global image_raw
    global cap
    image_raw = None
    img = None
    ros_flag = True
    rospy.init_node("falling_estimation", anonymous = True)
    if is_topic_alive(d435_path):
        image_by_d435()
        
    elif is_topic_alive(usb_path):
        image_by_usb()
    else:
        image_by_video()
        ros_flag = False
    rate = rospy.Rate(90)
    if ros_flag :
        print("rosmode now\n")
        while not rospy.is_shutdown():
            if image_raw is not None:
                previmg = img
                img = hsv_color_filter(image_raw)
                nextimg = img
                if not previmg is None:
                    diff = moving_object_extractor(previmg, nextimg)
                    output = dilation_image(20,3,diff)
                    cv2.imshow("image_raw", output)
                    key = cv2.waitKey(1) #1ms待機=ほぼリアルタイムで表示できるはず
                    if key == 27:
                        break
            rate.sleep()
        cv2.destroyAllWindows()
    else:
        print("videomode now\n")
        while True:
            ret, image_raw = cap.read()
            if image_raw is not None:
                previmg = img
                img = hsv_color_filter(image_raw)
                ##img = image_raw
                nextimg = img
                if not(previmg is None):
                    diff = moving_object_extractor(previmg, nextimg)
                    output = dilation_image(25,10,diff)
                    ball_pos = find_balls(output) #list
                    ##print("ballpos: ",ball_pos)
                    output = displayCircle(image_raw, ball_pos, 2)
                    #cImage = black2color(output)
                    #im1 = resizeImage(output, 2, 2)
                    #im2 = resizeImage(cImage, 2, 2)
                    #print(im1.shape)
                    #print(im1.dtype)
                    #print(im2.shape)
                    #print(im2.dtype)
                    #im_h = cv2.hconcat([im1, im2])
                    cv2.imshow("image_raw", output)
                    key = cv2.waitKey(1) #1ms待機=ほぼリアルタイムで表示できるはず
                    if key == 27:
                        break
            time.sleep(0.01)
        cv2.destroyAllWindows()

if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        test()
